#!/usr/bin/python
#----------------------------------------------------------------------
#
# Service for Cancer.gov (task #4001).  For documentation on behavior,
# refer to the WSDL document (glossifier.xml).
#
# BZIssue::4001
# BZIssue::4701
#
#----------------------------------------------------------------------

from argparse import ArgumentParser
import os
import re
from lxml import etree
import cdr
from cdrapi import db
import WebService

class Request:
    logger = cdr.Logging.get_logger("glossifier")
    WSDL = "d:/cdr/glossifier/cgi-bin/glossifier.xml"
    CONTENT_TYPE = "text/xml"
    SOAP_NS = "http://schemas.xmlsoap.org/soap/envelope/"
    CDR_MAP = { None: cdr.NAMESPACE }
    RESPONSE = "{%s}glossifyResponse" % cdr.NAMESPACE
    RESULT = "{%s}glossifyResult" % cdr.NAMESPACE
    MASK_PATTERNS = (
        "(?s)<!--.*?-->",
        "(?isu)<a\\s[^>]+>.*?</a>|{{.*?}}",
        "<[^>]*>"
    )

    def __init__(self, root):
        self.fragment = ""
        self.dictionaries = set()
        self.languages = set()
        self.names = self.load_names()
        Request.logger.debug("loaded %d names", len(self.names))
        self.regex = self.build_regex()
        #Request.logger.debug("regex=%r", self.regex)
        nodes = root.findall("*/{%s}glossify/*" % cdr.NAMESPACE)
        if not len(nodes):
            Request.logger.warning("adjust for mishandled namespace")
            # soapPy doesn't handle the namespace correctly.
            nodes = root.findall("*/glossify/*")
        if len(nodes):
            self.fragment = cdr.get_text(nodes[0])
            if len(nodes) > 1:
                for child in nodes[1].findall("*"):
                    dictionary = cdr.get_text(child).strip()
                    if dictionary:
                        self.dictionaries.add(dictionary)
                if len(nodes) > 2:
                    for child in nodes[2].findall("*"):
                        language = cdr.get_text(child).strip()
                        if language:
                            self.languages.add(language)
        self.doc = self.prep_doc(self.fragment)
        self.logger.debug("fragment: %s", self.fragment)
        self.logger.debug("languages: %s", self.languages)
        self.logger.debug("dictionaries: %s", self.dictionaries)

    def glossify(self):
        Request.logger.debug("glossify()")
        matches = []
        flags = re.UNICODE | re.IGNORECASE
        for match in re.finditer(self.regex, self.doc, flags):
            matches.append(self.Match(self.doc, match))
        self.logger.info("found %d matching phrases", len(matches))
        response = etree.Element(self.RESPONSE, nsmap=self.CDR_MAP)
        result = etree.SubElement(response, self.RESULT)
        for match in matches:
            Request.logger.debug("processing %s", match.key)
            terms = self.names.get(match.key)
            if not terms:
                self.logger.error("unable to find %s", match.key)
                continue
            for doc_id in terms:
                term = terms[doc_id]
                for lang in term:
                    if self.languages and lang not in self.languages:
                        continue
                    dictionaries = term[lang]
                    if self.dictionaries:
                        if dictionaries:
                            for d in dictionaries:
                                if d in self.dictionaries:
                                    result.append(match.term(doc_id, lang, d))
                        else:
                            result.append(match.term(doc_id, lang))
                    elif dictionaries:
                        for d in dictionaries:
                            result.append(match.term(doc_id, lang, d))
                    else:
                        result.append(match.term(doc_id, lang))
        envelope = self.envelope()
        body = self.body(envelope)
        body.append(response)
        return envelope

    def build_regex(self):
        name_set = set()
        for name in self.names:
            for doc_id in self.names[name]:
                for language in self.names[name][doc_id]:
                    if language in self.languages or not self.languages:
                        if not self.dictionaries:
                            name_set.add(name)
                        else:
                            dict_set = self.names[name][doc_id][language]
                            if self.dictionaries.intersection(dict_set):
                                name_set.add(name)
        name_list = sorted(name_set, key=len, reverse=True)
        regex_names = "|".join([self.to_regex(n) for n in name_list])
        return "(?<!\\w)(%s)(?!\\w)" % regex_names

    @classmethod
    def prep_doc(cls, doc):
        for pattern in cls.MASK_PATTERNS:
            doc = re.sub(pattern, Request.mask, doc)
        return doc

    @classmethod
    def fault_response(cls, agent, message):
        envelope = cls.envelope()
        body = cls.body(envelope)
        fault = cls.fault(body)
        etree.SubElement(fault, "faultcode").text = "soap:%s" % agent
        etree.SubElement(fault, "faultstring").text = str(message)
        return envelope

    @classmethod
    def envelope(cls):
        soap_map = { "soap": cls.SOAP_NS }
        return etree.Element("{%s}Envelope" % cls.SOAP_NS, nsmap=soap_map)

    @classmethod
    def body(cls, envelope):
        return etree.SubElement(envelope, "{%s}Body" % cls.SOAP_NS)

    @classmethod
    def fault(cls, body):
        return etree.SubElement(body, "{%s}Fault" % cls.SOAP_NS)

    @classmethod
    def to_regex(cls, name):
        return (name
            .replace("\\", r"\\")
            .replace("+",  r"\+")
            .replace(" ",  r"\s+")
            .replace(".",  r"\.")
            .replace("^",  r"\^")
            .replace("$",  r"\$")
            .replace("*",  r"\*")
            .replace("?",  r"\?")
            .replace("{",  r"\{")
            .replace("}",  r"\}")
            .replace("[",  r"\[")
            .replace("]",  r"\]")
            .replace("|",  r"\|")
            .replace("(",  r"\(")
            .replace("'",  "['\u2019]")
            .replace(")",  r"\)"))

    @staticmethod
    def mask(match):
        return "|" * len(match.group(0))

    @staticmethod
    def load_names():
        query = db.Query("glossifier", "terms").where("pk = 1")
        return eval(query.execute().fetchone()[0].strip())

    class Match:
        WHITESPACE = re.compile("\\s+", re.UNICODE)
        TERM = "{%s}Term" % cdr.NAMESPACE
        START = "{%s}start" % cdr.NAMESPACE
        LENGTH = "{%s}length" % cdr.NAMESPACE
        DOC_ID = "{%s}docId" % cdr.NAMESPACE
        DICTIONARY = "{%s}dictionary" % cdr.NAMESPACE
        LANGUAGE = "{%s}language" % cdr.NAMESPACE
        FIRST_OCC = "{%s}firstOccurrence" % cdr.NAMESPACE
        seen = set()
        def __init__(self, doc, match):
            self.start = match.start()
            self.end = match.end()
            self.word = doc[self.start:self.end]
            self.length = self.end - self.start
            self.key = self.normalize(self.word)
            self.first_occurrence = self.key not in self.seen
            self.seen.add(self.key)
            Request.logger.debug("match for %s" % self.key)
        def term(self, doc_id, language, dictionary=None):
            first_occurrence = str(self.first_occurrence).lower()
            term = etree.Element(self.TERM)
            etree.SubElement(term, self.START).text = str(self.start)
            etree.SubElement(term, self.LENGTH).text = str(self.length)
            etree.SubElement(term, self.DOC_ID).text = "CDR%010d" % doc_id
            if dictionary is not None:
                etree.SubElement(term, self.DICTIONARY).text = dictionary
            etree.SubElement(term, self.LANGUAGE).text = language
            etree.SubElement(term, self.FIRST_OCC).text = first_occurrence
            return term

        @classmethod
        def normalize(cls, name):
            return cls.WHITESPACE.sub(" ", name).replace("\u2019", "'").lower()


def main():
    parser = ArgumentParser()
    parser.add_argument("--standalone", action="store_true")
    parser.add_argument("--debug", action="store_true")
    opts = parser.parse_args()
    if opts.debug:
        Request.logger.setLevel("DEBUG")
    try:
        wsr = WebService.Request(opts.standalone, Request.logger)
        if wsr.logLevel > 1:
            Request.logger.setLevel("DEBUG")
        Request.logger.info("%s request from %s", wsr.type, wsr.client)
        Request.logger.debug("Request body:\n%s", wsr.message_text)
        if "/www.w3.org/2003/05/soap-envelope" in wsr.message_text.lower():
            Request.SOAP_NS = "http://www.w3.org/2003/05/soap-envelope"
            Request.CONTENT_TYPE = "application/soap+xml"
            Request.logger.debug("SOAP_NS: %s", Request.SOAP_NS)
            Request.logger.debug("CONTENT_TYPE: %s", Request.CONTENT_TYPE)
    except Exception as e:
        if opts.standalone:
            Request.logger.exception("WebService.Request()")
            raise
        with open(Request.WSDL) as fp:
            doc = fp.read()
        try:
            http_host = os.environ["HTTP_HOST"]
        except:
            http_host = "glossifier.cancer.gov"
        doc = doc.replace("@@HOST_NAME@@", http_host)
        response = WebService.Response(doc, Request.logger)
        Request.logger.debug("sending back WSDL")
        response.send()
    try:
        Request.logger.debug("message: %r", wsr.message)
        request = Request(wsr.doc)
        try:
            response = WebService.Response(request.glossify())
        except Exception as e:
            Request.logger.exception("glossify()")
            response = Request.fault_response("Server", e)
    except Exception as e:
        Request.logger.exception("Request()")
        response = Request.fault_response("Client", e)
    Request.logger.debug("Response body:\n%s", response.body)
    response.send(Request.CONTENT_TYPE)


if __name__ == '__main__':
    try:
        main()
    except Exception:
        Request.logger.error("cwd: %s", os.getcwd())
        Request.logger.exception("main()")
